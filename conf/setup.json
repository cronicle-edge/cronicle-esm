{
	"storage": [
		[ "put", "users/admin", {
			"username": "admin",
			"password": "$2a$10$VAF.FNvz1JqhCAB5rCh9GOa965eYWH3fcgWIuQFAmsZnnVS/.ye1y",
			"full_name": "Administrator",
			"email": "admin@cronicle.com",
			"active": 1,
			"modified": 1434125333,
			"created": 1434125333,
			"salt": "salty",
			"privileges": {
				"admin": 1
			}
		} ],
		[ "listCreate", "global/users", { "page_size": 100 } ],
		[ "listPush", "global/users", { "username": "admin" } ],
		[ "listCreate", "global/plugins", {} ],
		[ "listPush", "global/plugins", {
			"id": "testplug",
			"title": "Test Plugin",
			"enabled": 1,
			"command": "bin/test-plugin.js",
			"username": "admin",
			"modified": 1434125333,
			"created": 1434125333,
			"params": [
				{ "id":"duration", "type":"text", "size":10, "title":"Test Duration (seconds)", "value": 60 },
				{ "id":"progress", "type":"checkbox", "title":"Report Progress", "value": 1 },
				{ "id":"burn", "type":"checkbox", "title":"Burn Memory/CPU", "value": 0 },
				{ "id":"action", "type":"select", "title":"Simulate Action", "items":["Success","Failure","Crash"], "value": "Success" },
				{ "id":"secret", "type":"hidden", "value":"Will not be shown in Event UI" }
			]
		} ],
		[ "listPush", "global/plugins", {
			"id": "shellplug",
			"title": "Shell Script",
			"enabled": 1,
			"command": "bin/shell-plugin.js",
			"username": "admin",
			"uid": "cronicle",
			"modified": 1434125333,
			"created": 1434125333,
			"params": [
				{ "id":"script", "type":"textarea", "rows":10, "title":"Script Source", "value": "#!/usr/bin/env bash\n\n# Enter your shell script code here\n# Press F11 to toggle full screen mode\n# To get workflow's job argument refer to $JOB_ARG env variable\necho \"print integer with % to report progress (e.g. 20%)\"\n sleep 2 && echo `date` && echo 10%\n sleep 2 && echo `date` && echo 40%\n sleep 2 && echo `date` && echo 90%\n sleep 2\necho '{\"perf\":{\"step3\":55,\"step2\":30,\"step1\":20}}'" },
				{ "id":"annotate", "type":"checkbox", "title":"Add Date/Time Stamps to Log", "value": 0 },
				{ "id":"json", "type":"checkbox", "title":"Interpret JSON in Output", "value": 0 },
				{"type":"select","id":"lang","title":"syntax","items":["shell","powershell","javascript","python","perl","groovy","java","csharp","scala","sql","yaml","dockerfile"],"value":"shell"},
				{"type":"select","id":"theme","title":"theme","items":["default","gruvbox-dark","solarized light","solarized dark","darcula"],"value":"default"},
				{"type":"checkbox","id":"sub_params","title":"Resolve parameters","value":0},
				{"type":"checkbox","id":"logmemo","title":"Log Memo","value":0},
				{"type":"filelist","id":"files","title":"File List","theme":"default", "value":0}	
			]
		} ],

		[ "listPush", "global/plugins", {
			"id": "sshplug",
			"title": "SSH",
			"enabled": 1,
			"command": "bin/ssh-plugin.js",
			"username": "admin",
			"uid": "",
			"modified": 1434125333,
			"created": 1434125333,
			"params": [
				{ "id":"ssh_host", "type":"text", "size":40, "title":"HOST/URI", "value": "sftp://cronicle:Password@localhost:22" },
				{ "id":"ssh_cmd", "type":"text", "size":40, "title":"Command", "value": "bash -" },
				{ "id":"script", "type":"textarea", "rows":10, "title":"STDIN Script", "value": "\n\necho \"STARTED\"\n\n# set trap command for proper termination handling\necho \"trap: kill $$\"\n\nsleep 15\necho \"COMPLETED\"\n\n# to specify host use full URI (sftp://user:Password@host:port)\n# or keep that URI as env variable and specify variable name\n# keep blank or localhost to run command locally (without ssh)\n# if using ssh key\n# sftp://user@host:port?privateKey=/path/to/file&passphrase=Password)\n# you can also keep ssh key in SSH Key parameter\n# if password contains special character use URI escape characters (e.g. @ => %40)\n\n# if using with WF plugin host could be specified via Job Argument parameter\n\n# many interpreters (besides sh/bash) will support execution from stdin\n# node -\n# python -\n# pwsh -c -\n# some will need a file to be created, if so try smth like\n# cat - > /tmp/myfile && groovy myfile\n\n# This should work the same way on Windows machines too (if openssh installed)\n# powershell -\n\n# Please note that aborting SSH job won't terminate you remote command\n# You can specify termination command by printing it out with \"trap:\" prefix, e.g.\n# echo \"trap: kill $$\" or \"trap: kill -9 -$$\"" },
				{"type":"select","id":"lang","title":"syntax","items":["shell","powershell","javascript","python","perl","groovy","java","csharp","scala","sql","yaml","dockerfile","json","props"],"value":"shell"},
				{"type":"select","id":"theme","title":"theme","items":["default","gruvbox-dark","solarized light","solarized dark","darcula"],"value":"default"},
				{ "id":"ssh_key", "type":"textarea", "rows":5, "title":"SSH Key", "value": "" },
				{ "id":"json", "type":"checkbox", "title":"Interpret JSON in Output", "value": 0 }		
			]
		} ],		

		[ "listPush", "global/plugins", {
			"params": [

				{
					"type": "select",
					"id": "wf_concur",
					"title": "Concurrency level",
					"items": [
						"(sync)",
						"2",
						"3",
						"4",
						"5",
						"6",
						"7",
						"8",
						"9",
						"10",
						"11",
						"12",
						"13",
						"14",
						"15",
						"16"
					],
					"value": "(sync)"
				},

				{
					"type": "select",
					"id": "wf_maxerr",
					"title": "Max Errors",
					"items": [
						"(None)",
						"1",
						"2",
						"3",
						"4",
						"5",
						"6",
						"7",
						"8",
						"9",
						"10"
					],
					"value": "(None)"
				},
				{ "type":"checkbox", "id":"wf_strict", "title":"Report error on any job failure", "value":0 },
				{ "type": "eventlist", "id": "wf_events", "title": "Workflow Events"}
			],
			"enabled": 1,
			"title": "Workflow",
			"command": "bin/workflow.js",
			"cwd": "",
			"uid": "",
			"secret": "",
			"id": "workflow",
			"username": "admin",
			"modified": 1608659489,
			"created": 1608325957
		} ],

		[ "listPush", "global/plugins", {
			"id": "urlplug",
			"title": "HTTP Request",
			"enabled": 1,
			"command": "bin/url-plugin.js",
			"username": "admin",
			"modified": 1434125333,
			"created": 1434125333,
			"params": [
				{ "type":"select", "id":"method", "title":"Method", "items":["GET", "HEAD", "POST"], "value":"GET" }, 
				{ "type":"textarea", "id":"url", "title":"URL", "rows":3, "value":"http://" }, 
				{ "type":"textarea", "id":"headers", "title":"Request Headers", "rows":4, "value":"User-Agent: Cronicle/1.0" }, 
				{ "type":"textarea", "id":"data", "title":"POST Data", "rows":4, "value":"" }, 
				{ "type":"text", "id":"timeout", "title":"Timeout (Seconds)", "size":5, "value":"30" }, 
				{ "type":"checkbox", "id":"follow", "title":"Follow Redirects", "value":0 }, 
				{ "type":"checkbox", "id":"ssl_cert_bypass", "title":"SSL Cert Bypass", "value":0 }, 
				{ "type":"text", "id":"success_match", "title":"Success Match", "size":20, "value":"" }, 
				{ "type":"text", "id":"error_match", "title":"Error Match", "size":20, "value":"" }
			]
		} ],
		[ "listCreate", "global/categories", {} ],
		[ "listPush", "global/categories", {
			"id": "general",
			"title": "General",
			"enabled": 1,
			"username": "admin",
			"modified": 1434125333,
			"created": 1434125333,
			"description": "For events that don't fit anywhere else.",
			"gcolor": "#3498DB",
			"max_children": 0
		} ],

		[ "listCreate", "global/secrets", {} ],
		[ "listPush", "global/secrets", {
			"id": "globalenv",
			"encrypted": false,
			"target": null,
			"form": "props",
			"data": "# dotenv style key/value pairs representing env variables\nmyvar = some_value"
		} ],
		
		[ "listCreate", "global/server_groups", {} ],
		[ "listPush", "global/server_groups", {
			"id": "maingrp",
			"title": "Manager Group",
			"regexp": "_HOSTNAME_",
			"manager": 1
		} ],
		[ "listPush", "global/server_groups", {
			"id": "workergrp",
			"title": "Workers",
			"regexp": "worker",
			"manager": 0
		} ],
		[ "listPush", "global/server_groups", {
			"id": "allgrp",
			"title": "All Servers",
			"regexp": ".+",
			"manager": 0
		} ],
		[ "listCreate", "global/servers", {} ],
		[ "listPush", "global/servers", {
			"hostname": "_HOSTNAME_",
			"ip": "_IP_"
		} ],
		[ "listCreate", "global/schedule", {} ],
		[ "listCreate", "global/api_keys", {} ],
		[ "listCreate", "global/conf_keys", {} ],
		[ "listPush", "global/conf_keys", {
			"id": "base_app_url", 
			"title": "base_app_url",
			"key": "http://localhost:3012",
			"description": "overrides app url displayed in notifications"
		}],
		[ "listPush", "global/conf_keys", {
			"id": "ad_domain", 
			"title": "ad_domain",
			"key": "corp.cronicle.com",
			"description": "default AD domain for external auth. You can also prepend domain to the username (e.g. user@domain.com)"
		}],
		[ "listPush", "global/conf_keys", {
			"id": "smtp_hostname", 
			"title": "smtp_hostname",
			"key": "mailrelay.cronicle.com",
			"description": "SMTP server (port 25 is used default)"
		}],
		[ "listPush", "global/conf_keys", {
			"id": "email_from", 
			"title": "email_from",
			"key": "admin@cronicle.com",
			"description": "Notification sender"
		}],
		[ "listPush", "global/conf_keys", {
			"id": "admin_web_hook", 
			"title": "admin_web_hook",
			"key": "",
			"description": "Webhook for activity log notifications. Uses slack markdown.\nTip: use cronicle run api to handle notification with custom event"
		}],
		[ "listPush", "global/conf_keys", {
			"id": "custom_live_log_socket_url", 
			"title": "custom_live_log_socket_url",
			"key": "http://localhost:3012",
			"description": "!this requires browser page refresh\noverrides the host for live log connection. On multinode cluster this can be assigned to each node, e.g. \ncustom_live_log_socket_url.manager\ncustom_live_log_socket_url.worker1\nCan specify custom port too. This is useful if using reverse proxy or docker/swarm"
		}]
		
		,[ "listPush", "global/conf_keys", {
			"id": "web_hook_text_templates_job_complete", 
			"title": "web_hook_text_templates.job_complete",
			"key": "✔️ *[event_title]* completed successfully on [hostname] <[job_details_url] | More details>",
			"description": "Success notification (slack markdown by default)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hook_text_templates_job_failure", 
			"title": "web_hook_text_templates.job_failure",
			"key": "❌ *[event_title]* failed on [hostname]: Error: _*[description]*_ <[job_details_url] | More details>",
			"description": "Error notification (slack markdown by default)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hook_text_templates_job_start", 
			"title": "web_hook_text_templates.job_start",
			"key": "🚀 *[event_title]* started on [hostname] <[job_details_url] | More details>",
			"description": "Start notification (slack markdown by default)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hook_text_templates_job_warning", 
			"title": "web_hook_text_templates.job_warning",
			"key": "⚠️ *[event_title]* completed with warning on [hostname]: Warning: _*[description]*_ <[job_details_url] | More details>",
			"description": "Warning notification. Warning is exit code 255 (-1) and it's treaded as success"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_general", 
			"title": "web_hooks.slack_general",
			"key": "https://hooks.slack.com/services/yourIncomingWebHook",
			"description": "You can add webhook info under web_hooks object and then use property name (e.g. slack_general) to specify that webhook in notification options, instead of using full url. Use either url string (like this example) or object to specify custom data/options/headers and some other items (see example below)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_info_data_channel", 
			"title": "web_hooks.slack_info.data.channel",
			"key": "cronicle",
			"description": "Add custom key to request body (e.g. to specify channel)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_info_textkey", 
			"title": "web_hooks.slack_info.textkey",
			"key": "markdown",
			"description": "By default cronicle message is added as <b>text</b> key on webhook request body. Use this config if you need to use something else (e.g. markdown, html, etc). You can specify nested key too using dot notation e.g. 'data.mytextkey'"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_info_compact", 
			"title": "web_hooks.slack_info.compact",
			"type": "bool",
			"key": false,
			"description": "(Notification webhooks only) Include only basic info in payload (id, title, action) and your custom data. Useful in case of key conflicts"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_info_token", 
			"title": "web_hooks.slack_info.token",
			"key": "xoxp-xxxxxxxxx-xxxx",
			"description": "This is a shortcut for web_hooks.slack_info.headers.Authorization = Bearer xoxp-xxxxxxxxx-xxxx"
		}]
		
		,[ "listPush", "global/conf_keys", {
			"id": "web_hooks_slack_info_url", 
			"title": "web_hooks.slack_info.url",
			"key": "https://slack.com/api/chat.postMessage",
			"description": "Specify webhook url (for object). If using incoming webhooks then just specify it as string (see slack_general example above)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "oninfo_web_hook", 
			"title": "oninfo_web_hook",
			"key": "",
			"description": "Special webhook - will fire on info message, e.g. server startup/restart/error. Those messages appear on activity log"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "universal_web_hook", 
			"title": "universal_web_hook",
			"key": "",
			"description": "Special webhook - will fire on each job start/completion"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "onupdate_web_hook", 
			"title": "onupdate_web_hook",
			"key": "",
			"description": "Special webhook - will fire on metadata update (e.g. on event update)"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "ui_live_log_ws", 
			"title": "ui.live_log_ws",
			"type": "bool",
			"key": false,
			"description": "Turns on classic websocket api for live log"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "params_demo", 
			"title": "params.sql.demo",
			"key": "SELECT * FROM\nSOMETABLE s \nWHERE s.col = 30",
			"type": "text/x-sql",
			"description": " params config (object) can be used to set placeholders in shell scripts. You need to check 'resolve parameters' box in event parameters. To set placeholder use square braket syntax, e.g. for this parameter you should use [/sql/demo]"
		}]

		,[ "listPush", "global/conf_keys", {
			"id": "_read_me_", 
			"title": "_read_me_",
			"key": "please read",
			"description": "Those keys are applied right after storage and webserver init, and then can be updated at runtime (no need to restart cronicle). Please note that you cannot override storage/webserver parameters.\nTo add nested config (object) use dot syntax, e.g. servers.host1. If you convert some nested key into string it would erase related subkeys from config object. In this case just remove that string key and click reload button . To check actual config state use <b>Config Viewer</b> link"
		}]

	]
}
